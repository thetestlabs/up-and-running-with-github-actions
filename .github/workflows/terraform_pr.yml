---
name: "Terraform PR"

"on":
  pull_request:

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repo
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize the working directory
      - name: Terraform Init
        id: init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      # Checks that all Terraform configuration files are valid
      - name: Terraform Validate
        id: validate
        run: terraform validate

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan

      - name: Plan output
        id: output
        uses: actions/github-script@v3
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format Check: \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization: \`${{ steps.init.outcome }}\`
            #### Terraform Plan: \`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`hcl
            ${process.env.PLAN}
            \`\`\`

            </details>
            
            **Pushed By**: ${{ github.actor }}
            **Commit Msg**: ${{ git log -1 --pretty=format:"%s" }}
            `;
            
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Run Terrascan
        id: terrascan
        uses: accurics/terrascan-action@main
        with:
          iac_type: 'terraform'
          iac_version: 'v14'
          policy_type: 'aws'
          only_warn: true
          iac_dir: infrastructure



      - name: Terraform apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        working-directory: ${{ env.working-directory }}
        env:
          TF_VAR_assume_role: "my-github-actions-role"

      # - name: Install InSpec
      #   uses: actionshub/chef-install@main
      #   with:
      #     channel: current
      #     project: inspec

      # - name: Assume Role
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-region: eu-west-1
      #     role-to-assume: arn:aws:iam::88888888888888:role/my-github-actions-role
      #     role-duration-seconds: 600
      #     role-skip-session-tagging: true          

      # - name: Infrastructure Tests
      #   id: inspec
      #   run: inspec exec profile/example --reporter=cli:- progress:inspec.log --input-file=profile/example/attributes-example.yml -t aws://
      #   env:
      #     CHEF_LICENSE: accept

      # - name: Infrastructure Test Results 
      #   id: inspec_results
      #   if: always()
      #   run: | 
      #     REPORT="$(cat inspec.log)"
      #     REPORT="${REPORT//'%'/'%25'}"
      #     REPORT="${REPORT//$'\n'/'%0A'}"
      #     REPORT="${REPORT//$'\r'/'%0D'}"
      #     echo "::set-output name=loginspec::$REPORT"

      # - name: Infrastructure tests Output
      #   if: always()      
      #   uses: actions/github-script@v3
      #   env:
      #     INSPEC: "Inspec Test Results \n${{ steps.inspec_results.outputs.loginspec }}"
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     script: |
      #       const output = `#### Inspec Tests ðŸ–Œ\`${{ steps.inspec.outcome }}\`

      #       <details><summary>Show Test Results</summary>

      #       \`\`\`

      #       ${process.env.INSPEC}
      #       \`\`\`
           
      #       </details>

      #       `;
      #       github.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })
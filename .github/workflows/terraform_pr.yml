name: Terraform_PR

on:
  pull_request:
    branches:
      - main

jobs:
  terraform_pr:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repo
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize the working directory
      - name: Terraform Init
        id: init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      # Checks that all Terraform configuration files are valid
      - name: Terraform Validate
        id: validate
        run: terraform validate

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform plan

  tflint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v2
        name: Checkout source code

      - uses: actions/cache@v2
        name: Cache plugin dir
        with:
          path: ~/.tflint.d/plugins
          key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

      - uses: terraform-linters/setup-tflint@v1
        name: Setup TFLint
        with:
          tflint_version: v0.29.0

      - name: Show version
        run: tflint --version

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        run: tflint -f compact

      - name: Output
        id: output
        uses: actions/github-script@v3
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format Check: \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization: \`${{ steps.init.outcome }}\`
            #### Terraform Plan: \`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`hcl
            ${process.env.PLAN}
            \`\`\`

            </details>
            `;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

